{
    "collab_server" : "",
    "contents" : "\n#' @title tree_to_PN\n#'\n#' @description Create of petri net from a process tree.\n#'\n#' @param tree The process tree to be converted\n#' @param name A name, which will be used to indicated the start and end transitions of the petri net.\n#'\n#' @export tree_to_PN\n\n\n\n\ntree_to_PN <- function(tree) {\n\tif(is.null(tree$children)) {\n\t\treturn(sequence_to_PN(tree$name, tree$name))\n\t}\n\telse {\n\t\tchild_nets <- list()\n\t\tfor(i in 1:length(tree$children)) {\n\t\t\tchild_nets[[tree$children[[i]]$name]] <- Recall(tree$children[[i]])\n\t\t}\n\n\n\t\tstart_places <- paste0(\"start_\", names(child_nets))\n\t\tend_places <- paste0(\"end_\", names(child_nets))\n\n\n\t\tif(grepl(\"xorLoop\", tree$name)) {\n\t\t\tchild_nets %>%\n\t\t\t\tlapply(places) %>%\n\t\t\t\tbind_rows() %>%\n\t\t\t\tmutate(id = ifelse(id == paste0(\"start_\", tree$children[[1]]$name), paste0(\"start_do_\", tree$name), id),\n\t\t\t\t\t   id = ifelse(id == paste0(\"end_\", tree$children[[1]]$name), paste0(\"end_do_\", tree$name), id),\n\t\t\t\t\t   id = ifelse(id == paste0(\"start_\", tree$children[[2]]$name), paste0(\"end_do_\", tree$name), id),\n\t\t\t\t\t   id = ifelse(id == paste0(\"end_\", tree$children[[2]]$name), paste0(\"start_do_\", tree$name), id),\n\t\t\t\t\t   id = ifelse(id == paste0(\"start_\", tree$children[[3]]$name), paste0(\"end_do_\", tree$name), id),\n\t\t\t\t\t   id = ifelse(id == paste0(\"end_\", tree$children[[3]]$name), paste0(\"end_\", tree$name), id)) %>%\n\t\t\t\tbind_rows(data.frame(id = paste0(\"start_\", tree$name))) %>%\n\t\t\t\tunique -> places\n\n\t\t\tchild_nets %>%\n\t\t\t\tlapply(transitions) %>%\n\t\t\t\tbind_rows() %>%\n\t\t\t\tbind_rows(data.frame(id = paste0(\"inv_start_\", tree$name))) %>%\n\t\t\t\tunique -> transitions\n\n\t\t\tchild_nets %>%\n\t\t\t\tlapply(flows) %>%\n\t\t\t\tbind_rows() %>%\n\t\t\t\tmutate(from = ifelse(from == paste0(\"start_\", tree$children[[1]]$name), paste0(\"start_do_\", tree$name), from),\n\t\t\t\t\t   from = ifelse(from == paste0(\"start_\", tree$children[[2]]$name), paste0(\"end_do_\", tree$name), from),\n\t\t\t\t\t   from = ifelse(from == paste0(\"start_\", tree$children[[3]]$name), paste0(\"end_do_\", tree$name), from)) %>%\n\t\t\t\tmutate(to = ifelse(to == paste0(\"end_\", tree$children[[1]]$name), paste0(\"end_do_\", tree$name),to),\n\t\t\t\t\t   to = ifelse(to == paste0(\"end_\", tree$children[[2]]$name),paste0(\"start_do_\", tree$name), to),\n\t\t\t\t\t   to = ifelse(to == paste0(\"end_\", tree$children[[3]]$name), paste0(\"end_\", tree$name), to)) %>%\n\t\t\t\tbind_rows(data.frame(from = paste0(\"start_\", tree$name), to = paste0(\"inv_start_\", tree$name)),\n\t\t\t\t\t\t  data.frame(from = paste0(\"inv_start_\", tree$name), to = paste0(\"start_do_\", tree$name))) %>%\n\t\t\t\tunique() -> flows\n\n\t\t\treturn(create_PN(places, transitions, flows, paste0(\"start_\", tree$name)))\n\n\t\t}\n\t\telse if(grepl(\"xor\", tree$name) & !grepl(\"xorLoop\", tree$name)){\n\t\t\tchild_nets %>%\n\t\t\t\tlapply(places) %>%\n\t\t\t\tbind_rows() %>%\n\t\t\t\tmutate(id = ifelse(id %in% start_places, paste0(\"start_\",tree$name), id),\n\t\t\t\t\t   id = ifelse(id %in% end_places, paste0(\"end_\",tree$name), id)) %>%\n\t\t\t\tunique -> places\n\t\t\tchild_nets %>%\n\t\t\t\tlapply(transitions) %>%\n\t\t\t\tbind_rows() -> transitions\n\t\t\tchild_nets %>%\n\t\t\t\tlapply(flows) %>%\n\t\t\t\tbind_rows() %>%\n\t\t\t\tmutate(from = ifelse(from %in% start_places, paste0(\"start_\",tree$name), ifelse(from %in% end_places, paste0(\"end_\",tree$name), from)),\n\t\t\t\t\t   to = ifelse(to %in% start_places, paste0(\"start_\",tree$name), ifelse(to %in% end_places, paste0(\"end_\",tree$name), to))) -> flows\n\t\t\treturn(create_PN(places, transitions, flows, paste0(\"start_\",tree$name)))\n\t\t} else if(grepl(\"and\", tree$name )) {\n\t\t\tchild_nets %>%\n\t\t\t\tlapply(places) %>%\n\t\t\t\tbind_rows() -> places\n\n\t\t\tchild_nets %>%\n\t\t\t\tlapply(transitions) %>%\n\t\t\t\tbind_rows() %>%\n\t\t\t\tbind_rows(data.frame(id = c(paste0(\"inv_start_\", tree$name),paste0(\"inv_end_\", tree$name)), stringsAsFactors = F)) -> transitions\n\t\t\tchild_nets %>%\n\t\t\t\tlapply(flows) %>%\n\t\t\t\tbind_rows() %>%\n\t\t\t\tbind_rows(data.frame(from = paste0(\"inv_start_\", tree$name), to = places$id[grepl(\"start_\", places$id)])) %>%\n\t\t\t\tbind_rows(data.frame(from = places$id[grepl(\"end_\", places$id)], to = paste0(\"inv_end_\", tree$name))) %>%\n\t\t\t\tbind_rows(data.frame(from = paste0(\"start_\",tree$name),to = paste0(\"inv_start_\", tree$name))) %>%\n\t\t\t\tbind_rows(data.frame(from = paste0(\"inv_end_\", tree$name),to = paste0(\"end_\",tree$name))) -> flows\n\n\t\t\tplaces %>% bind_rows(data.frame(id = c(paste0(\"start_\",tree$name),paste0(\"end_\",tree$name)), stringsAsFactors = F)) -> places\n\t\t\treturn(create_PN(places, transitions, flows, paste0(\"start_\",tree$name)))\n\n\n\t\t}\n\t\telse if(grepl(\"sequence\", tree$name)) {\n\t\t\t#for(i in 1:(length(child_nets))-1) {\n\t\t\t#\tchild_nets[[i]] %>% places() %>% mutate(id = gsub(tree$children[i]$name,\n\t\t\t#\t\t\t\t\t\t\t\t\t\t\t\t\t  paste0(tree$children[i]$name,\"_\", paste0(tree$children[i+1]$name))))\n\t\t\t#}\n\n\t\t\tchild_nets %>% lapply(places) %>%\n\t\t\t\tbind_rows() -> places\n\t\t\tchild_nets %>% lapply(transitions) %>%\n\t\t\t\tbind_rows() -> transitions\n\t\t\tchild_nets %>% lapply(flows) %>%\n\t\t\t\tbind_rows() -> flows\n\n\t\t\tfor(i in 1:(length(child_nets)-1)) {\n\t\t\t\toldname <- paste0(\"end_\",tree$children[[i]]$name)\n\t\t\t\tnewname <- paste0(tree$children[[i]]$name, \"_\", tree$children[[i+1]]$name)\n\t\t\t\tplaces %>% mutate(id = gsub(paste0(\"^\",oldname,\"$\"),newname,id)) -> places\n\t\t\t\tflows %>% mutate(to = gsub(paste0(\"^\",oldname,\"$\"),newname,to)) -> flows\n\t\t\t}\n\t\t\tfor(i in 2:(length(child_nets))) {\n\t\t\t\toldname <- paste0(\"start_\",tree$children[[i]]$name)\n\t\t\t\tnewname <- paste0(tree$children[[i-1]]$name, \"_\", tree$children[[i]]$name)\n\t\t\t\tplaces %>% mutate(id = gsub(paste0(\"^\",oldname,\"$\"),newname,id)) -> places\n\t\t\t\tflows %>% mutate(from = gsub(paste0(\"^\",oldname,\"$\"),newname,from)) -> flows\n\t\t\t}\n\n\t\t\tplaces %>% unique() -> places\n\t\t\toldname <- paste0(\"^start_\",tree$children[[1]]$name, \"$\")\n\t\t\tplaces %>% mutate(id = gsub(oldname, paste0(\"start_\",tree$name), id)) -> places\n\t\t\tflows %>% mutate(from = gsub(oldname, paste0(\"start_\",tree$name), from)) -> flows\n\n\t\t\toldname <- paste0(\"^end_\",tree$children[[length(tree$children)]]$name, \"$\")\n\t\t\tplaces %>% mutate(id = gsub(oldname, paste0(\"end_\",tree$name), id)) -> places\n\t\t\tflows %>% mutate(to = gsub(oldname, paste0(\"end_\",tree$name), to)) -> flows\n\n\t\t\treturn(create_PN(places, transitions, flows, paste0(\"start_\",tree$name)))\n\t\t}\n\t}\n}\n",
    "created" : 1475481683437.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2866829578",
    "id" : "CE99CAE6",
    "lastKnownWriteTime" : 1475502530,
    "last_content_update" : 1475502530487,
    "path" : "C:/Users/lucp8407/Google Drive/My UH/R workspace/petrinetR/R/tree_to_PN.R",
    "project_path" : "R/tree_to_PN.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}